from __future__ import with_statement
import os.path

MODULE_TEMPLATE=""".. Autogenerated by genmods.py

******************************************************************************
%(name)s
******************************************************************************

:mod:`%(package)s.%(module)s`
==============================================================================

.. automodule:: %(package)s.%(module)s
   :members:
   :undoc-members:
   :show-inheritance:

"""

INDEX_TEMPLATE=""".. Autogenerated by genmods.py

.. _api-index:

##############################################################################
   %(package_name)s
##############################################################################

.. only:: html

   :Release: |version|
   :Date: |today|

.. toctree::

   %(rsts)s
"""


def genfiles(package, package_name, modules, dir='api'):

    if not os.path.exists(dir):
        os.makedirs(dir)

    for module,name in modules:
        with open(os.path.join(dir,module+'_api.rst'), 'w') as f:
            f.write(MODULE_TEMPLATE%locals())

    rsts = "\n   ".join(module+'_api.rst' for module,name in modules)
    with open(os.path.join(dir,'index.rst'),'w') as f:
        f.write(INDEX_TEMPLATE%locals())


modules=[
    ('core', 'Core table'),
    #('constants', 'Physical constants'),
    ('chemicals', 'Chemical database'),
    ('formulas', 'Chemical formula operations'),
    ('covalent_radius', 'Covalent radius property'),
    ('crystal_structure', 'Covalent radius property'),
    ('density', 'Density property'),
    ('mass', 'Mass property'),
    ('nsf', 'Neutron scattering property'),
    ('xsf', 'X-ray scattering property'),
]
package='periodictable'
package_name='Extensible Periodic Table API'
genfiles(package, package_name, modules)
